1. config/db.js
หน้าที่ : จัดการการเชื่อมต่อฐานข้อมูล MySQL โดยใช้ mysql2 ไลบรารี.
รายละเอียด :
สร้างการเชื่อมต่อฐานข้อมูลแบบสระว่ายน้ำ (connection pool) เพื่อเพิ่มประสิทธิภาพและการจัดการความเสถียร.
ส่งออกการเชื่อมต่อฐานข้อมูลเพื่อใช้ในโมเดลและคอนโทรลเลอร์.
2. models/userModel.js
หน้าที่ : จัดการการปฏิสัมพันธ์กับตารางผู้ใช้ในฐานข้อมูล.
รายละเอียด :
ฟังก์ชันสำหรับการลงทะเบียนผู้ใช้, เข้าสู่ระบบ, อัปเดตโปรไฟล์, อัปเดตภาพโปรไฟล์, และอัปเดตข้อมูลส่วนตัว.
3. controllers/userController.js
หน้าที่ : จัดการการรับคำร้องขอจาก API และเรียกใช้ฟังก์ชันจากโมเดลเพื่อประมวลผล.
รายละเอียด :
ฟังก์ชันสำหรับการลงทะเบียนผู้ใช้, เข้าสู่ระบบ, อัปเดตโปรไฟล์, อัปเดตภาพโปรไฟล์, และอัปเดตข้อมูลส่วนตัว.
4. routes/userRoutes.js
หน้าที่ : กำหนดเส้นทาง (routes) สำหรับการเข้าถึง API ที่เกี่ยวข้องกับผู้ใช้.
รายละเอียด :
กำหนดเส้นทางสำหรับการลงทะเบียนผู้ใช้, เข้าสู่ระบบ, อัปเดตโปรไฟล์, อัปเดตภาพโปรไฟล์, และอัปเดตข้อมูลส่วนตัว.
5. models/tripModel.js
หน้าที่ : จัดการการปฏิสัมพันธ์กับตารางทริปในฐานข้อมูล.
รายละเอียด :
ฟังก์ชันสำหรับการสร้างทริป, ดึงรายการทริป, ดึงรายละเอียดทริป, อัปเดตทริป, ลบทริป, ปิดทริป, เชิญผู้ใช้เข้าร่วมทริป, ดึงรายการผู้ใช้ที่เข้าร่วมทริป, ยกเลิกการเข้าร่วมทริป, สร้างเหตุการณ์, อัปเดตเหตุการณ์, ลบเหตุการณ์, และอัปเดตค่าใช้จ่าย.
6. controllers/tripController.js
หน้าที่ : จัดการการรับคำร้องขอจาก API และเรียกใช้ฟังก์ชันจากโมเดลเพื่อประมวลผล.
รายละเอียด :
ฟังก์ชันสำหรับการสร้างทริป, ดึงรายการทริป, ดึงรายละเอียดทริป, อัปเดตทริป, ลบทริป, ปิดทริป, เชิญผู้ใช้เข้าร่วมทริป, ดึงรายการผู้ใช้ที่เข้าร่วมทริป, ยกเลิกการเข้าร่วมทริป.
7. routes/tripRoutes.js
หน้าที่ : กำหนดเส้นทาง (routes) สำหรับการเข้าถึง API ที่เกี่ยวข้องกับทริป.
รายละเอียด :
กำหนดเส้นทางสำหรับการสร้างทริป, ดึงรายการทริป, ดึงรายละเอียดทริป, อัปเดตทริป, ลบทริป, ปิดทริป, เชิญผู้ใช้เข้าร่วมทริป, ดึงรายการผู้ใช้ที่เข้าร่วมทริป, ยกเลิกการเข้าร่วมทริป.
8. models/groupModel.js
หน้าที่ : จัดการการปฏิสัมพันธ์กับตารางกลุ่มในฐานข้อมูล.
รายละเอียด :
ฟังก์ชันสำหรับการสร้างกลุ่ม, เชิญผู้ใช้เข้าร่วมกลุ่ม, ลบผู้ใช้ออกจากกลุ่ม, ดึงรายการกลุ่ม, และค้นหาผู้ใช้.
9. controllers/groupController.js
หน้าที่ : จัดการการรับคำร้องขอจาก API และเรียกใช้ฟังก์ชันจากโมเดลเพื่อประมวลผล.
รายละเอียด :
ฟังก์ชันสำหรับการสร้างกลุ่ม, ดึงรายการกลุ่ม, ค้นหาผู้ใช้, เชิญผู้ใช้เข้าร่วมกลุ่ม, และลบผู้ใช้ออกจากกลุ่ม.
10. routes/groupRoutes.js
หน้าที่ : กำหนดเส้นทาง (routes) สำหรับการเข้าถึง API ที่เกี่ยวข้องกับกลุ่ม.
รายละเอียด :
กำหนดเส้นทางสำหรับการสร้างกลุ่ม, ดึงรายการกลุ่ม, ค้นหาผู้ใช้, เชิญผู้ใช้เข้าร่วมกลุ่ม, และลบผู้ใช้ออกจากกลุ่ม.
11. models/messageModel.js
หน้าที่ : จัดการการปฏิสัมพันธ์กับตารางข้อความในฐานข้อมูล.
รายละเอียด :
ฟังก์ชันสำหรับการส่งข้อความ, ดึงข้อความในกลุ่ม.
12. controllers/messageController.js
หน้าที่ : จัดการการรับคำร้องขอจาก API และเรียกใช้ฟังก์ชันจากโมเดลเพื่อประมวลผล.
รายละเอียด :
ฟังก์ชันสำหรับการส่งข้อความ, ดึงข้อความในกลุ่ม.
13. routes/messageRoutes.js
หน้าที่ : กำหนดเส้นทาง (routes) สำหรับการเข้าถึง API ที่เกี่ยวข้องกับข้อความ.
รายละเอียด :
กำหนดเส้นทางสำหรับการส่งข้อความ, ดึงข้อความในกลุ่ม.
14. models/tripEventModel.js
หน้าที่ : จัดการการปฏิสัมพันธ์กับตารางเหตุการณ์ทริปในฐานข้อมูล.
รายละเอียด :
ฟังก์ชันสำหรับการสร้างเหตุการณ์, อัปเดตเหตุการณ์, และลบเหตุการณ์.
15. controllers/tripEventController.js
หน้าที่ : จัดการการรับคำร้องขอจาก API และเรียกใช้ฟังก์ชันจากโมเดลเพื่อประมวลผล.
รายละเอียด :
ฟังก์ชันสำหรับการสร้างเหตุการณ์, อัปเดตเหตุการณ์, และลบเหตุการณ์.
16. routes/tripEventRoutes.js
หน้าที่ : กำหนดเส้นทาง (routes) สำหรับการเข้าถึง API ที่เกี่ยวข้องกับเหตุการณ์ทริป.
รายละเอียด :
กำหนดเส้นทางสำหรับการสร้างเหตุการณ์, อัปเดตเหตุการณ์, และลบเหตุการณ์.
17. middleware/upload.js
หน้าที่ : จัดการการอัปโหลดไฟล์ (เช่น ภาพโปรไฟล์) โดยใช้ multer ไลบรารี.
รายละเอียด :
กำหนดการจัดเก็บไฟล์, ขนาดไฟล์สูงสุด, และประเภทไฟล์ที่อนุญาต.
ส่งออกฟังก์ชันสำหรับการอัปโหลดไฟล์.
18. app.js
หน้าที่ : เป็นไฟล์หลักของแอปพลิเคชันที่ตั้งค่าและเรียกใช้เซิร์ฟเวอร์ Express.
รายละเอียด :
ตั้งค่า middleware สำหรับการจัดการคำร้องขอ JSON และการอัปโหลดไฟล์.
กำหนดเส้นทาง (routes) สำหรับ API ที่แตกต่างกัน.
ตั้งค่าการจัดการข้อผิดพลาด.
เรียกใช้เซิร์ฟเวอร์ Express.
19. seed.js
หน้าที่ : สร้างข้อมูลเริ่มต้นในฐานข้อมูล.
รายละเอียด :
ฟังก์ชันสำหรับการสร้างผู้ใช้, ทริป, ผู้เข้าร่วมทริป, เหตุการณ์, และค่าใช้จ่าย.
ใช้การเชื่อมต่อฐานข้อมูลจาก config/db.js.
20. tests/user.test.js
หน้าที่ : เขียนการทดสอบหน่วยสำหรับ API ที่เกี่ยวข้องกับผู้ใช้โดยใช้ Mocha และ Chai.
รายละเอียด :
ทดสอบการลงทะเบียนผู้ใช้, เข้าสู่ระบบ, อัปเดตโปรไฟล์, อัปเดตภาพโปรไฟล์, และอัปเดตข้อมูลส่วนตัว.
21. package.json
หน้าที่ : จัดการข้อมูลโครงการและข้อกำหนดการพึ่งพา.
รายละเอียด :
ระบุชื่อโปรเจ็ค, คำอธิบาย, เวอร์ชัน, ผู้พัฒนา, และข้อกำหนดการพึ่งพา.
กำหนดสคริปต์สำหรับการเริ่มต้นเซิร์ฟเวอร์และการทดสอบ.
22. uploads/profile_images/
หน้าที่ : โฟลเดอร์สำหรับเก็บไฟล์ภาพโปรไฟล์ที่ผู้ใช้อัปโหลด.
รายละเอียด :
สร้างโฟลเดอร์หากไม่มีอยู่แล้ว.
ใช้ในการเก็บไฟล์ภาพโปรไฟล์ที่ผู้ใช้อัปโหลด.
23. app.js
หน้าที่ : เป็นไฟล์หลักของแอปพลิเคชันที่ตั้งค่าและเรียกใช้เซิร์ฟเวอร์ Express.
รายละเอียด :
ตั้งค่า middleware สำหรับการจัดการคำร้องขอ JSON และการอัปโหลดไฟล์.
กำหนดเส้นทาง (routes) สำหรับ API ที่แตกต่างกัน.
ตั้งค่าการจัดการข้อผิดพลาด.
เรียกใช้เซิร์ฟเวอร์ Express.